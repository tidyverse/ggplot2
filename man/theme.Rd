% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/theme.r
\name{theme}
\alias{theme}
\title{Set theme elements}
\usage{
theme(..., complete = FALSE, validate = TRUE)
}
\arguments{
\item{...}{a list of element name, element pairings that modify the
existing theme.}

\item{complete}{set this to TRUE if this is a complete theme, such as
the one returned \code{by theme_grey()}. Complete themes behave
differently when added to a ggplot object.}

\item{validate}{TRUE to run validate_element, FALSE to bypass checks.}
}
\description{
Use this function to modify theme settings.
}
\details{
Theme elements can inherit properties from other theme elements.
For example, \code{axis.title.x} inherits from \code{axis.title},
which in turn inherits from \code{text}. All text elements inherit
directly or indirectly from \code{text}; all lines inherit from
\code{line}, and all rectangular objects inherit from \code{rect}.

For more examples of modifying properties using inheritance, see
\code{\link{+.gg}} and \code{\link{\%+replace\%}}.

To see a graphical representation of the inheritance tree, see the
last example below.
}
\section{Theme elements}{

The individual theme elements are:

\tabular{ll}{
  line             \tab all line elements
                   (\code{element_line}) \cr
  rect             \tab all rectangular elements
                   (\code{element_rect}) \cr
  text             \tab all text elements
                   (\code{element_text}) \cr
  title            \tab all title elements: plot, axes, legends
                   (\code{element_text}; inherits from \code{text}) \cr
  aspect.ratio     \tab aspect ratio of the panel \cr

  axis.title       \tab label of axes
                   (\code{element_text}; inherits from \code{text}) \cr
  axis.title.x     \tab x axis label
                   (\code{element_text}; inherits from \code{axis.title}) \cr
  axis.title.y     \tab y axis label
                   (\code{element_text}; inherits from \code{axis.title}) \cr
  axis.text        \tab tick labels along axes
                   (\code{element_text}; inherits from \code{text}) \cr
  axis.text.x      \tab x axis tick labels
                   (\code{element_text}; inherits from \code{axis.text}) \cr
  axis.text.y      \tab y axis tick labels
                   (\code{element_text}; inherits from \code{axis.text}) \cr
  axis.ticks       \tab tick marks along axes
                   (\code{element_line}; inherits from \code{line}) \cr
  axis.ticks.x     \tab x axis tick marks
                   (\code{element_line}; inherits from \code{axis.ticks}) \cr
  axis.ticks.y     \tab y axis tick marks
                   (\code{element_line}; inherits from \code{axis.ticks}) \cr
  axis.ticks.length  \tab length of tick marks
                   (\code{unit}) \cr
  axis.line        \tab lines along axes
                   (\code{element_line}; inherits from \code{line}) \cr
  axis.line.x      \tab line along x axis
                   (\code{element_line}; inherits from \code{axis.line}) \cr
  axis.line.y      \tab line along y axis
                   (\code{element_line}; inherits from \code{axis.line}) \cr

  legend.background  \tab background of legend
                   (\code{element_rect}; inherits from \code{rect}) \cr
  legend.margin    \tab the margin around each legend
                   (\code{margin}) \cr
  legend.spacing   \tab the spacing between legends
                   (\code{unit}) \cr
  legend.spacing.x  \tab the horizontal spacing between legends
                   (\code{unit}); inherits from \code{legend.spacing} \cr
  legend.spacing.y  \tab the horizontal spacing between legends
                   (\code{unit}); inherits from \code{legend.spacing} \cr
  legend.key       \tab background underneath legend keys
                   (\code{element_rect}; inherits from \code{rect}) \cr
  legend.key.size  \tab size of legend keys
                   (\code{unit}) \cr
  legend.key.height  \tab key background height
                   (\code{unit}; inherits from \code{legend.key.size}) \cr
  legend.key.width   \tab key background width
                   (\code{unit}; inherits from \code{legend.key.size}) \cr
  legend.text      \tab legend item labels
                   (\code{element_text}; inherits from \code{text}) \cr
  legend.text.align  \tab alignment of legend labels
                   (number from 0 (left) to 1 (right)) \cr
  legend.title     \tab title of legend
                   (\code{element_text}; inherits from \code{title}) \cr
  legend.title.align \tab alignment of legend title
                   (number from 0 (left) to 1 (right)) \cr
  legend.position  \tab the position of legends
                   ("none", "left", "right", "bottom", "top", or two-element
                     numeric vector) \cr
  legend.direction \tab layout of items in legends
                   ("horizontal" or "vertical") \cr
  legend.justification \tab anchor point for positioning legend inside plot
                   ("center" or two-element numeric vector) or the
                   justification according to the plot area when positioned
                   outside the plot \cr
  legend.box       \tab arrangement of multiple legends
                   ("horizontal" or "vertical") \cr
  legend.box.just  \tab justification of each legend within the overall
                   bounding box, when there are multiple legends
                   ("top", "bottom", "left", or "right")\cr
  legend.box.margin \tab margins around the full legend area, as specified
                   using \code{\link{margin}} \cr
  legend.box.background \tab background of legend area
                   (\code{element_rect}; inherits from \code{rect}) \cr
  legend.box.spacing \tab The spacing between the plotting area and the
                   legend box (\code{unit}) \cr

  panel.background \tab background of plotting area, drawn underneath plot
                   (\code{element_rect}; inherits from \code{rect}) \cr
  panel.border     \tab border around plotting area, drawn on top of plot
                   so that it covers tick marks and grid lines. This should
                   be used with \code{fill=NA}
                   (\code{element_rect}; inherits from \code{rect}) \cr
  panel.spacing    \tab spacing between facet panels
                   (\code{unit}) \cr
  panel.spacing.x  \tab horizontal spacing between facet panels
                   (\code{unit}; inherits from \code{panel.spacing}) \cr
  panel.spacing.y  \tab vertical spacing between facet panels
                   (\code{unit}; inherits from \code{panel.spacing}) \cr
  panel.grid       \tab grid lines
                   (\code{element_line}; inherits from \code{line}) \cr
  panel.grid.major \tab major grid lines
                   (\code{element_line}; inherits from \code{panel.grid}) \cr
  panel.grid.minor \tab minor grid lines
                   (\code{element_line}; inherits from \code{panel.grid}) \cr
  panel.grid.major.x \tab vertical major grid lines
                   (\code{element_line}; inherits from \code{panel.grid.major}) \cr
  panel.grid.major.y \tab horizontal major grid lines
                   (\code{element_line}; inherits from \code{panel.grid.major}) \cr
  panel.grid.minor.x \tab vertical minor grid lines
                   (\code{element_line}; inherits from \code{panel.grid.minor}) \cr
  panel.grid.minor.y \tab horizontal minor grid lines
                   (\code{element_line}; inherits from \code{panel.grid.minor}) \cr
  panel.ontop        \tab option to place the panel (background, gridlines)
                          over the data layers.  Usually used with a transparent
                          or blank \code{panel.background}. (\code{logical}) \cr

  plot.background  \tab background of the entire plot
                   (\code{element_rect}; inherits from \code{rect}) \cr
  plot.title       \tab plot title (text appearance)
                   (\code{element_text}; inherits from \code{title})
                   left-aligned by default\cr
  plot.subtitle    \tab plot subtitle (text appearance)
                   (\code{element_text}; inherits from \code{title})
                   left-aligned by default\cr
  plot.caption     \tab caption below the plot (text appearance)
                   (\code{element_text}; inherits from \code{title})
                   right-aligned by default\cr
  plot.margin      \tab margin around entire plot
                   (\code{unit} with the sizes of the top, right, bottom, and
                    left margins) \cr

  strip.background \tab background of facet labels
                   (\code{element_rect}; inherits from \code{rect}) \cr
  strip.text       \tab facet labels
                   (\code{element_text}; inherits from \code{text}) \cr
  strip.text.x     \tab facet labels along horizontal direction
                   (\code{element_text}; inherits from \code{strip.text}) \cr
  strip.text.y     \tab facet labels along vertical direction
                   (\code{element_text}; inherits from \code{strip.text}) \cr
  strip.switch.pad.grid \tab space between strips and axes when strips are switched
                   (\code{unit}) \cr
  strip.switch.pad.wrap \tab space between strips and axes when strips are switched
                   (\code{unit}) \cr
}
}
\examples{
\donttest{
p <- ggplot(mtcars, aes(mpg, wt)) +
  geom_point()
p
p + theme(panel.background = element_rect(colour = "pink"))
p + theme_bw()

# Scatter plot of gas mileage by vehicle weight
p <- ggplot(mtcars, aes(wt, mpg)) +
  geom_point()
# Calculate slope and intercept of line of best fit
coef(lm(mpg ~ wt, data = mtcars))
p + geom_abline(intercept = 37, slope = -5)
# Calculate correlation coefficient
with(mtcars, cor(wt, mpg, use = "everything", method = "pearson"))
#annotate the plot
p + geom_abline(intercept = 37, slope = -5) +
geom_text(data = data.frame(), aes(4.5, 30, label = "Pearson-R = -.87"))

# Change the axis labels
# Original plot
p
p + labs(x = "Vehicle Weight", y = "Miles per Gallon")
# Or
p + labs(x = "Vehicle Weight", y = "Miles per Gallon")

# Change title appearance
p <- p + labs(title = "Vehicle Weight-Gas Mileage Relationship")
# Set title to twice the base font size
p + theme(plot.title = element_text(size = rel(2)))
p + theme(plot.title = element_text(size = rel(2), colour = "blue"))

# Add a subtitle and adjust bottom margin
p + labs(title = "Vehicle Weight-Gas Mileage Relationship",
         subtitle = "You need to wrap long subtitleson manually") +
    theme(plot.subtitle = element_text(margin = margin(b = 20)))

# Changing plot look with themes
DF <- data.frame(x = rnorm(400))
m <- ggplot(DF, aes(x = x)) +
  geom_histogram()
# Default is theme_grey()
m
# Compare with
m + theme_bw()

# Manipulate Axis Attributes
m + theme(axis.line = element_line(size = 3, colour = "red", linetype = "dotted"))
m + theme(axis.text = element_text(colour = "blue"))
m + theme(axis.text.y = element_blank())
m + theme(axis.ticks = element_line(size = 2))
m + theme(axis.title.y = element_text(size = rel(1.5), angle = 90))
m + theme(axis.title.x = element_blank())
m + theme(axis.ticks.length = unit(.85, "cm"))

# Legend Attributes
z <- ggplot(mtcars, aes(wt, mpg)) +
  geom_point(aes(colour = factor(cyl)))
z
z + theme(legend.position = "none")
z + theme(legend.position = "bottom")
# Or use relative coordinates between 0 and 1
z + theme(legend.position = c(.5, .5))
# Add a border to the whole legend
z + theme(legend.background = element_rect(colour = "black"))
# Legend margin controls extra space around outside of legend:
z + theme(legend.background = element_rect(),
          legend.margin = margin(1, 1, 1, 1, "cm"))
z + theme(legend.background = element_rect(),
          legend.margin = margin(0, 0, 0, 0, "cm"))
# Legend spacing pushes legends apart
z + theme(legend.background = element_rect(),
          legend.margin = margin(1, 1, 1, 1, "cm"),
          legend.spacing = unit(1, "cm"))
# A border and background can also be added around the whole legend area
z + theme(legend.box.background = element_rect(),
          legend.box.margin = margin(5, 5, 5, 5, "mm"))
# The distance from the plot area can be set with legend.box.spacing
z + theme(legend.box.spacing = unit(3, "cm"))
# and the justifaction related to the plot area can be set
z + theme(legend.justification = "bottom")
# Or to just the keys
z + theme(legend.key = element_rect(colour = "black"))
z + theme(legend.key = element_rect(fill = "yellow"))
z + theme(legend.key.size = unit(2.5, "cm"))
z + theme(legend.text = element_text(size = 20, colour = "red", angle = 45))
z + theme(legend.title = element_text(face = "italic"))

# To change the title of the legend use the name argument
# in one of the scale options
z + scale_colour_brewer(name = "My Legend")
z + scale_colour_grey(name = "Number of \\nCylinders")

# Panel and Plot Attributes
z + theme(panel.background = element_rect(fill = "black"))
z + theme(panel.border = element_rect(linetype = "dashed", colour = "black"))
z + theme(panel.grid.major = element_line(colour = "blue"))
z + theme(panel.grid.minor = element_line(colour = "red", linetype = "dotted"))
z + theme(panel.grid.major = element_line(size = 2))
z + theme(panel.grid.major.y = element_blank(),
          panel.grid.minor.y = element_blank())
z + theme(plot.background = element_rect())
z + theme(plot.background = element_rect(fill = "green"))

# Faceting Attributes
set.seed(4940)
dsmall <- diamonds[sample(nrow(diamonds), 1000), ]
k <- ggplot(dsmall, aes(carat, ..density..)) +
  geom_histogram(binwidth = 0.2) +
  facet_grid(. ~ cut)
k + theme(strip.background = element_rect(colour = "purple", fill = "pink",
                                          size = 3, linetype = "dashed"))
k + theme(strip.text.x = element_text(colour = "red", angle = 45, size = 10,
                                      hjust = 0.5, vjust = 0.5))
k + theme(panel.spacing = unit(5, "lines"))
k + theme(panel.spacing.y = unit(0, "lines"))

# Put gridlines on top
meanprice <- tapply(diamonds$price, diamonds$cut, mean)
cut <- factor(levels(diamonds$cut), levels = levels(diamonds$cut))
df <- data.frame(meanprice, cut)
g <- ggplot(df, aes(cut, meanprice)) + geom_bar(stat = "identity")
g + geom_bar(stat = "identity") +
    theme(panel.background = element_blank(),
          panel.grid.major.x = element_blank(),
          panel.grid.minor.x = element_blank(),
          panel.grid.minor.y = element_blank(),
          panel.ontop = TRUE)

# Modify a theme and save it
mytheme <- theme_grey() + theme(plot.title = element_text(colour = "red"))
p + mytheme

}
}
\seealso{
\code{\link{+.gg}}

\code{\link{\%+replace\%}}

\code{\link{rel}}

\code{\link{element_blank}}

\code{\link{element_line}}

\code{\link{element_rect}}

\code{\link{element_text}}
}

