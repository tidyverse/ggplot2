% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/boilerplates.R
\name{boilerplate}
\alias{boilerplate}
\alias{boilerplate.Geom}
\title{Produce boilerplate constructors}
\usage{
boilerplate(x, ...)

\method{boilerplate}{Geom}(x, ..., checks = NULL, env = caller_env())
}
\arguments{
\item{x}{An object to setup a constructor for.}

\item{...}{Name-value pairs to use as additional arguments in the
constructor. For layers, these are passed on to \code{\link[=layer]{layer(params)}}.}

\item{checks}{A list of calls to be evaluated before construction of the
object, such as one constructed with \code{\link[rlang:defusing-advanced]{exprs()}}.}

\item{env}{An environment to search for the object.}
}
\value{
A function
}
\description{
The \code{boilerplate()} functions sets up a user-facing constructor for ggproto
classes. Currently, \code{boilerplate()} is implemented for \code{Geom} classes.
}
\examples{
# For testing purposes, a geom that returns grobs
GeomTest <- ggproto(
  "GeomTest", Geom,
  draw_group = function(..., grob = grid::pointsGrob()) {
    return(grob)
  }
)
# Creating a constructor
geom_test <- boilerplate(GeomTest)

# Note that `grob` is automatically an argument to the function
names(formals(geom_test))

# Use in a plot
set.seed(1234)
p <- ggplot(mtcars, aes(disp, mpg))
p + geom_test()
p + geom_test(grob = grid::circleGrob())
}
\keyword{internal}
