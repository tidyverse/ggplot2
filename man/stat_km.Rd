% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/stat-km.R
\name{stat_km}
\alias{stat_km}
\title{Adds a Kaplan Meier Estimate of Survival}
\usage{
stat_km(mapping = NULL, data = NULL, se = TRUE, trans = "identity",
  geom = "km", position = "identity", ...)
}
\arguments{
\item{mapping}{The aesthetic mapping, usually constructed with
\code{\link{aes}} or \code{\link{aes_string}}. Only needs to be set
at the layer level if you are overriding the plot defaults.}

\item{data}{A layer specific dataset - only needed if you want to override
the plot defaults.}

\item{se}{display confidence interval around KM curve? (TRUE by default, use
\code{conf.int} to control significance level which is 0.95 by default)}

\item{trans}{Transformation to apply to the survival probabilities. Defaults
to "identity". Other options include "event", "cumhaz", "cloglog", or
define your own using \link{trans_new}.}

\item{geom}{The geometric object to use display the data}

\item{position}{The position adjustment to use for overlappling points
on this layer}

\item{...}{Other arguments passed to \code{survival::survfit.formula}}
}
\value{
a data.frame with additional columns: \item{x}{x in data}
  \item{y}{Kaplan-Meier Survival Estimate at x} \item{ymin}{Lower confidence
  limit of KM curve, if \code{se = TRUE}} \item{ymax}{Upper confidence limit
  of KM curve, if \code{se = FALSE}}
}
\description{
Adds a Kaplan Meier Estimate of Survival
}
\details{
This stat is for computing the Kaplan-Meier survival estimate for
right-censored data. It requires the aesthetic mapping \code{x} for the
observation times and \code{status} which indicates the event status,
normally 0=alive, 1=dead. Other choices are TRUE/FALSE (TRUE = death) or 1/2
(2=death).
}
\examples{
\donttest{
sex <- rbinom(250, 1, .5)
df <- data.frame(time = exp(rnorm(250, mean = sex)), status = rbinom(250, 1, .75), sex = sex)
ggplot(df, aes(time, status = status, color = factor(sex))) +
 stat_km()

## Examples illustrating the options passed to survfit.formula

p1 <- ggplot(df, aes(x = time, status = status))
p1 + stat_km(conf.int = .99)
p1 + stat_km(trans = "cumhaz")
# cloglog plots also log transform the time axis
p1 + stat_km(trans = "cloglog") + scale_x_log10()
p1 + stat_km(type = "fleming-harrington")
p1 + stat_km(error = "tsiatis")
p1 + stat_km(conf.type = "log-log")
p1 + stat_km(start.time = 200)
}
}

